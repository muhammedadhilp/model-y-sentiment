{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPbSs7YruMxeV68LXGJulQX",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/muhammedadhilp/model-y-sentiment/blob/main/model-y-sentiment\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "abDMejruj8Bc",
        "outputId": "c537001f-7bcd-4f06-eadd-b09a2c5aadd8"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                                 comment  upvotes  sentiment\n",
              "0      Ah, is this why you see so many Tesla's with s...       47          1\n",
              "1                                 Who’s gonna tell them?       78          1\n",
              "2      As a passenger #1 is brutal for me.  The car i...       37          1\n",
              "3                                     This reads like AI       22          1\n",
              "4      We warned you. \\n\\nAlso, “high tech vehicle” e...       12          1\n",
              "...                                                  ...      ...        ...\n",
              "41572  It's possible that they learned lessons from t...        9          1\n",
              "41573  My Tesla club was on a stand a weekend ago at ...        1          1\n",
              "41574  The only thing I've seen about a Y refresh lat...        1          1\n",
              "41575  Leaks or spy shots mid 2025, and release in 20...        1          1\n",
              "41576  I dunno, the Model 3 and Y share like 80-90% o...        1          1\n",
              "\n",
              "[41577 rows x 3 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-68c0ff87-b9f7-401b-b522-e66e7d95476f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>comment</th>\n",
              "      <th>upvotes</th>\n",
              "      <th>sentiment</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Ah, is this why you see so many Tesla's with s...</td>\n",
              "      <td>47</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Who’s gonna tell them?</td>\n",
              "      <td>78</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>As a passenger #1 is brutal for me.  The car i...</td>\n",
              "      <td>37</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>This reads like AI</td>\n",
              "      <td>22</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>We warned you. \\n\\nAlso, “high tech vehicle” e...</td>\n",
              "      <td>12</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41572</th>\n",
              "      <td>It's possible that they learned lessons from t...</td>\n",
              "      <td>9</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41573</th>\n",
              "      <td>My Tesla club was on a stand a weekend ago at ...</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41574</th>\n",
              "      <td>The only thing I've seen about a Y refresh lat...</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41575</th>\n",
              "      <td>Leaks or spy shots mid 2025, and release in 20...</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41576</th>\n",
              "      <td>I dunno, the Model 3 and Y share like 80-90% o...</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>41577 rows × 3 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-68c0ff87-b9f7-401b-b522-e66e7d95476f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-68c0ff87-b9f7-401b-b522-e66e7d95476f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-68c0ff87-b9f7-401b-b522-e66e7d95476f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-90390ea3-233b-4c53-88f6-bf83ae740653\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-90390ea3-233b-4c53-88f6-bf83ae740653')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-90390ea3-233b-4c53-88f6-bf83ae740653 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_08e6fcab-73b8-40a7-bb27-e6cdf716b744\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_08e6fcab-73b8-40a7-bb27-e6cdf716b744 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 41577,\n  \"fields\": [\n    {\n      \"column\": \"comment\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2628,\n        \"samples\": [\n          \"Is the the rattle we here when we accelerate?\",\n          \"Model 3 does pretty good, model Y too (in its segment).\\n\\nBut the model 3 gets beaten by the old ioniq, VW up, dacia spring etc.\\n\\nModel Y by the Kona EV.\",\n          \"Wow\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"upvotes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15,\n        \"min\": -43,\n        \"max\": 1218,\n        \"num_unique_values\": 151,\n        \"samples\": [\n          150,\n          10,\n          62\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sentiment\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 1,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 2
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "df=pd.read_csv(\"/content/reddit_customer_comments1.csv\")\n",
        "df"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# There seems to be an issue with the sentiment column as all the values are 1\n",
        "# So i am going to drop it and do sentiment analysis once  more using textblob\n",
        "df.drop('sentiment',axis = 1,inplace = True)"
      ],
      "metadata": {
        "id": "BnWV8txX6I1F"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Lets do sentiment analysis on our data using textblob\n",
        "from textblob import TextBlob\n",
        "\n",
        "# Function to analyze sentiment using TextBlob\n",
        "def analyze_sentiment(comment):\n",
        "    # Create a TextBlob object\n",
        "    blob = TextBlob(comment)\n",
        "    # Get polarity score\n",
        "    polarity = blob.sentiment.polarity\n",
        "    # Map polarity to sentiment label\n",
        "    if polarity > 0:\n",
        "        return 1\n",
        "    elif polarity == 0:\n",
        "        return 0\n",
        "    else:\n",
        "        return -1\n",
        "\n",
        "# Apply sentiment analysis to each comment in the DataFrame\n",
        "df['sentiment'] = df['comment'].apply(analyze_sentiment)\n"
      ],
      "metadata": {
        "id": "e2pnfABL7RjW"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "UW3p7iPj8Q82",
        "outputId": "f0f14c8d-12e7-42ab-8a86-51357a8edf3f"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                                 comment  upvotes  sentiment\n",
              "0      Ah, is this why you see so many Tesla's with s...       47          1\n",
              "1                                 Who’s gonna tell them?       78          0\n",
              "2      As a passenger #1 is brutal for me.  The car i...       37         -1\n",
              "3                                     This reads like AI       22          0\n",
              "4      We warned you. \\n\\nAlso, “high tech vehicle” e...       12         -1\n",
              "...                                                  ...      ...        ...\n",
              "41572  It's possible that they learned lessons from t...        9         -1\n",
              "41573  My Tesla club was on a stand a weekend ago at ...        1          1\n",
              "41574  The only thing I've seen about a Y refresh lat...        1         -1\n",
              "41575  Leaks or spy shots mid 2025, and release in 20...        1          0\n",
              "41576  I dunno, the Model 3 and Y share like 80-90% o...        1          1\n",
              "\n",
              "[41577 rows x 3 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9cc84ecd-1547-4495-bc5e-4b396b5d7e9d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>comment</th>\n",
              "      <th>upvotes</th>\n",
              "      <th>sentiment</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Ah, is this why you see so many Tesla's with s...</td>\n",
              "      <td>47</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Who’s gonna tell them?</td>\n",
              "      <td>78</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>As a passenger #1 is brutal for me.  The car i...</td>\n",
              "      <td>37</td>\n",
              "      <td>-1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>This reads like AI</td>\n",
              "      <td>22</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>We warned you. \\n\\nAlso, “high tech vehicle” e...</td>\n",
              "      <td>12</td>\n",
              "      <td>-1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41572</th>\n",
              "      <td>It's possible that they learned lessons from t...</td>\n",
              "      <td>9</td>\n",
              "      <td>-1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41573</th>\n",
              "      <td>My Tesla club was on a stand a weekend ago at ...</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41574</th>\n",
              "      <td>The only thing I've seen about a Y refresh lat...</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41575</th>\n",
              "      <td>Leaks or spy shots mid 2025, and release in 20...</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41576</th>\n",
              "      <td>I dunno, the Model 3 and Y share like 80-90% o...</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>41577 rows × 3 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9cc84ecd-1547-4495-bc5e-4b396b5d7e9d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9cc84ecd-1547-4495-bc5e-4b396b5d7e9d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9cc84ecd-1547-4495-bc5e-4b396b5d7e9d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-159ad4dd-9744-445f-b8cf-a45fcefa98c4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-159ad4dd-9744-445f-b8cf-a45fcefa98c4')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-159ad4dd-9744-445f-b8cf-a45fcefa98c4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_379f6960-5550-42b0-8922-c55d451e1cb1\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_379f6960-5550-42b0-8922-c55d451e1cb1 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 41577,\n  \"fields\": [\n    {\n      \"column\": \"comment\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2628,\n        \"samples\": [\n          \"Is the the rattle we here when we accelerate?\",\n          \"Model 3 does pretty good, model Y too (in its segment).\\n\\nBut the model 3 gets beaten by the old ioniq, VW up, dacia spring etc.\\n\\nModel Y by the Kona EV.\",\n          \"Wow\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"upvotes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15,\n        \"min\": -43,\n        \"max\": 1218,\n        \"num_unique_values\": 151,\n        \"samples\": [\n          150,\n          10,\n          62\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sentiment\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": -1,\n        \"max\": 1,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1,\n          0,\n          -1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(df.head())\n",
        "print('****************************************************************')\n",
        "print(df.tail())\n",
        "print('****************************************************************')\n",
        "print(df.isna().sum())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0axMw3iWExhl",
        "outputId": "3ae14528-0fdd-4d91-b1e3-cbba19180991"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                             comment  upvotes  sentiment\n",
            "0  Ah, is this why you see so many Tesla's with s...       47          1\n",
            "1                             Who’s gonna tell them?       78          0\n",
            "2  As a passenger #1 is brutal for me.  The car i...       37         -1\n",
            "3                                 This reads like AI       22          0\n",
            "4  We warned you. \\n\\nAlso, “high tech vehicle” e...       12         -1\n",
            "****************************************************************\n",
            "                                                 comment  upvotes  sentiment\n",
            "41572  It's possible that they learned lessons from t...        9         -1\n",
            "41573  My Tesla club was on a stand a weekend ago at ...        1          1\n",
            "41574  The only thing I've seen about a Y refresh lat...        1         -1\n",
            "41575  Leaks or spy shots mid 2025, and release in 20...        1          0\n",
            "41576  I dunno, the Model 3 and Y share like 80-90% o...        1          1\n",
            "****************************************************************\n",
            "comment      0\n",
            "upvotes      0\n",
            "sentiment    0\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sentiment_counts = df['sentiment'].value_counts()\n"
      ],
      "metadata": {
        "id": "6zEnre1VAwet"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Plotting\n",
        "plt.bar(sentiment_counts.index, sentiment_counts.values)\n",
        "plt.title('Sentiment Distribution')\n",
        "plt.xlabel('Sentiment')\n",
        "plt.ylabel('Frequency')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "eJD_o5da_yqo",
        "outputId": "c55d8672-479d-4ca1-83e4-4e1517a1afbd"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# As we can see from the bar chart above\n",
        "# There is a class imbalance in our data where positive sentiments are much higher than the others\n",
        "# So i have to perform undersampling on this data for better model performance\n",
        "# i already have the count of number of sentiment class in sentiment_count\n",
        "# Determine the desired number of samples for each class (e.g., make them equal)\n",
        "desired_count = sentiment_counts.min()\n",
        "\n",
        "# Undersample the majority class (positive sentiment)\n",
        "undersampled_df = pd.concat([\n",
        "    df[df['sentiment'] == sentiment].sample(desired_count, replace=False)\n",
        "    for sentiment in sentiment_counts.index\n",
        "])\n",
        "\n",
        "# Shuffle the undersampled DataFrame\n",
        "undersampled_df = undersampled_df.sample(frac=1, random_state=42).reset_index(drop=True)\n",
        "\n",
        "# Now undersampled_df contains a balanced dataset with an equal number of samples for each sentiment class\n",
        "undersampled_df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QS0kwBdUpHfr",
        "outputId": "0ef38674-b96e-45a8-feed-12f6de99161f"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(25239, 3)"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sentiment_counts1 = undersampled_df['sentiment'].value_counts()\n",
        "\n",
        "# Plotting\n",
        "plt.bar(sentiment_counts1.index, sentiment_counts1.values)\n",
        "plt.title('Sentiment Distribution')\n",
        "plt.xlabel('Sentiment')\n",
        "plt.ylabel('Frequency')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "_2IonuTsSkT_",
        "outputId": "6afa2342-a428-4b8d-fa89-d61cf1ce0a71"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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DEnGiBEjHOomTJhgSDI2btxoLgsJCTEkGVu2bDGXZWdnG+7u7sYTTzxRal9AVcMdJKCKufPOO5WcnKz/9//+n3bv3q2ZM2fKbrfrL3/5iz7++GOzbsWKFSouLtbf/vY3/fzzz+YUFBSkpk2batOmTQ7jent768EHHzTnbTabbrvtNn3//fdX1O+9994rX19fcz48PFyS9OCDDzo8vxIeHq6CggL9+OOPkqQNGzYoJydH999/v0P/rq6uCg8PL9W/JD366KMO8126dLni/v+It7e3Tp8+fdH1JR+Frlq1SoWFhRXez+jRoy+7dsCAAfrLX/5izt92220KDw/Xp59+WuH9X46S8cePH++w/IknnpAkrV692mF5WFiYunTpYs77+/urefPmV/3PDKgMBCSgCrr11lu1YsUKnTp1Stu3b1dcXJxOnz6te+65R/v375ckHTx4UIZhqGnTpvL393eYvvnmm1IPdNevX7/U8yS1atXSqVOnrqjXhg0bOsyXhKUGDRqUubxkfwcPHpQk9ezZs1T/69evL9W/h4eH+bxMZfb/R86cOaOaNWtedH23bt0UHR2tqVOnqm7duurfv7/i4+NLPZNzKW5ubqpfv/5l1zdt2rTUsmbNml3172Y6evSoqlWrpiZNmjgsDwoKkp+fn44ePeqw3HptSNfmzwyoDLyeAFRhNptNt956q2699VY1a9ZMw4YN0/LlyzV58mQVFxfLxcVFa9asKfOtKm9vb4f5i715ZVzhN31cbNw/2l9xcbGk359DCgoKKlVnfXvqar85VpbCwkJ99913at269UVrXFxc9O9//1vbtm3TJ598onXr1unhhx/W7NmztW3btlJ/DmVxd3dXtWqV+/+rLi4uZf7ZljzUfqVjX46rdc0B1wIBCbhOdOzYUZJ04sQJSVLjxo1lGIZCQ0PVrFmzStnHtfzW5MaNG0v6/c28yMjIShmzsvv/97//rd9++012u/0Pazt16qROnTrp+eef19KlSzV48GB98MEHGjFiRKX3VXL37ULfffedwxtvtWrVKvOjLOtdnvL0FhISouLiYh08eFAtW7Y0l2dlZSknJ0chISGXPRZQ1fERG1DFbNq0qcz/wy55/qN58+aSpIEDB8rV1VVTp04tVW8Yhn755Zdy79vLy0uSSr0BdzXY7Xb5+PjohRdeKPPZnYp8i3WNGjUkVU7/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5yABAMB1x6l3kH799VdVq+bYgqurq4qLiyVJoaGhCgoKUmJiork+Ly9PKSkpioiIkCRFREQoJydHqampZs3GjRtVXFys8PBws2bLli0qLCw0azZs2KDmzZuX+ngNAADAqQHpr3/9q55//nmtXr1aR44c0UcffaQ5c+bo7rvvliS5uLho7Nixeu655/Txxx9r7969GjJkiIKDgzVgwABJUsuWLdWnTx+NHDlS27dv15dffqkxY8Zo0KBBCg4OliQ98MADstlsGj58uPbt26cPP/xQ8+bN0/jx45116AAAoApz6kdsr776qp599ln9/e9/V3Z2toKDg/XII49o0qRJZs3EiRN19uxZjRo1Sjk5OercubPWrl0rDw8Ps2bJkiUaM2aMevXqpWrVqik6Olrz58831/v6+mr9+vWKjY1Vhw4dVLduXU2aNIlX/AEAQJlcjAu/thplysvLk6+vr3Jzc+Xj41Pp4zd6enWlj4nry5EXo5y6f65BcA3C2a7GNXgl/37zW2wAAAAWBCQAAAALAhIAAIAFAQkAAMCCgAQAAGBBQAIAALAgIAEAAFgQkAAAACwISAAAABYEJAAAAAsCEgAAgAUBCQAAwIKABAAAYEFAAgAAsCAgAQAAWBCQAAAALAhIAAAAFgQkAAAACwISAACABQEJAADAgoAEAABgQUACAACwICABAABYEJAAAAAsCEgAAAAWBCQAAAALAhIAAIAFAQkAAMCCgAQAAGBBQAIAALAgIAEAAFg4NSA1atRILi4upabY2FhJ0rlz5xQbG6s6derI29tb0dHRysrKchgjIyNDUVFRqlGjhgICAvTkk0/q/PnzDjVJSUlq37693N3d1aRJEyUkJFyrQwQAANchpwakHTt26MSJE+a0YcMGSdK9994rSRo3bpw++eQTLV++XJs3b9bx48c1cOBAc/uioiJFRUWpoKBAW7du1aJFi5SQkKBJkyaZNenp6YqKilKPHj2UlpamsWPHasSIEVq3bt21PVgAAHDdcHPmzv39/R3mX3zxRTVu3FjdunVTbm6u3nnnHS1dulQ9e/aUJMXHx6tly5batm2bOnXqpPXr12v//v367LPPFBgYqHbt2mn69Ol66qmnNGXKFNlsNi1cuFChoaGaPXu2JKlly5b64osvNHfuXNnt9mt+zAAAoOqrMs8gFRQU6P3339fDDz8sFxcX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4EFj7969xuOPP25Uq1bN+Oyzzy57nwSkCoiJiTEklZo2bdpk1kgy4uPjDcMwjF9//dXo3bu34e/vb1SvXt0ICQkxRo4caf7lcqMp7/kzjN9f9X/22WeNwMBAw93d3ejVq5dx4MCBa998FfHLL78Y999/v+Ht7W34+PgYw4YNcwiY6enpDuc0IyPD6Nq1q1G7dm3D3d3daNKkifHkk08aubm5TjqCa+vVV181GjZsaNhsNuO2224ztm3bZq7r1q2bERMT41C/bNkyo1mzZobNZjNatWplrF69+hp3XPWU5xyOHTvWrA0MDDT69etnfPXVV07oumooeeXcOpWcs5iYGKNbt26ltmnXrp1hs9mMm266yeHvwxtRec/hSy+9ZDRu3Njw8PAwateubXTv3t3YuHFjufbpYhiGccX3rQAAAP5E+B4kAAAACwISAACABQEJAADAgoAEAABgQUACAACwICABAABYEJAAAAAsCEgAbjhJSUlycXFRTk6Os1sBUEURkAA4zU8//aTRo0erYcOGcnd3V1BQkOx2u7788stK20f37t0dfldN+v2XvU+cOCFfX99K209FDR061PyNMwBVBz9WC8BpoqOjVVBQoEWLFummm25SVlaWEhMT9csvv1zV/dpstsv+JXoAN6hK+6EUACiHU6dOGZKMpKSkS9YMHz7cqFu3rlGzZk2jR48eRlpamrl+8uTJRtu2bY3FixcbISEhho+Pj3HfffcZeXl5hmGU/bt/6enp5u86nTp1yjAMw4iPjzd8fX2NTz75xGjWrJnh6elpREdHG2fPnjUSEhKMkJAQw8/Pz3jssceM8+fPm/s/d+6c8cQTTxjBwcFGjRo1jNtuu83hNwVLxl27dq3RokULw8vLy7Db7cbx48fN/q39Xbg9AOfhIzYATuHt7S1vb2+tXLlS+fn5Zdbce++9ys7O1po1a5Samqr27durV69eOnnypFlz+PBhrVy5UqtWrdKqVau0efNmvfjii5KkefPmKSIiQiNHjtSJEyd04sQJNWjQoMx9/frrr5o/f74++OADrV27VklJSbr77rv16aef6tNPP9V7772nN998U//+97/NbcaMGaPk5GR98MEH2rNnj+6991716dNHBw8edBh31qxZeu+997RlyxZlZGRowoQJkqQJEybob3/7m/r06WP2d/vtt1/xuQVQCZyd0ADcuP79738btWrVMjw8PIzbb7/diIuLM3bv3m0YhmF8/vnnho+Pj3Hu3DmHbRo3bmy8+eabhmH8fgemRo0a5h0jwzCMJ5980ggPDzfnu3XrZjz++OMOY5R1B0mScejQIbPmkUceMWrUqGGcPn3aXGa3241HHnnEMAzDOHr0qOHq6mr8+OOPDmP36tXLiIuLu+i4CxYsMAIDA835mJgYo3///pd1vgBcOzyDBMBpoqOjFRUVpc8//1zbtm3TmjVrNHPmTL399ts6e/aszpw5ozp16jhs89tvv+nw4cPmfKNGjVSzZk1zvl69esrOzi53LzVq1FDjxo3N+cDAQDVq1Eje3t4Oy0rG3rt3r4qKitSsWTOHcfLz8x16to5b0f4AXFsEJABO5eHhoTvvvFN33nmnnn32WY0YMUKTJ0/W3//+d9WrV09JSUmltvHz8zP/u3r16g7rXFxcVFxcXO4+yhrnUmOfOXNGrq6uSk1Nlaurq0PdhaGqrDEMwyh3fwCuLQISgColLCxMK1euVPv27ZWZmSk3Nzc1atSowuPZbDYVFRVVXoP/55ZbblFRUZGys7PVpUuXCo9ztfoDcGV4SBuAU/zyyy/q2bOn3n//fe3Zs0fp6elavny5Zs6cqf79+ysyMlIREREaMGCA1q9fryNHjmjr1q363//9X+3cufOy99OoUSOlpKToyJEj+vnnnyt0d6kszZo10+DBgzVkyBCtWLFC6enp2r59u2bMmKHVq1eXq789e/bowIED+vnnn1VYWFgp/QG4MgQkAE7h7e2t8PBwzZ07V127dlXr1q317LPPauTIkXrttdfk4uKiTz/9VF27dtWwYcPUrFkzDRo0SEePHlVgYOBl72fChAlydXVVWFiY/P39lZGRUWnHEB8fryFDhuiJJ55Q8+bNNWDAAO3YsUMNGza87DFGjhyp5s2bq2PHjvL396/UL8kEUHEuBh+GAwAAOOAOEgAAgAUBCQAAwIKABAAAYEFAAgAAsCAgAQAAWBCQAAAALAhIAAAAFgQkAAAACwISAACABQEJAADAgoAEAABgQUACAACw+P8AQoDHY+EbePoAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Starting preprocessing\n",
        "import nltk\n",
        "from nltk.tokenize import word_tokenize\n",
        "from nltk.corpus import stopwords\n",
        "from nltk.stem import SnowballStemmer\n",
        "import string\n",
        "import re\n",
        "\n",
        "nltk.download('punkt')\n",
        "nltk.download('stopwords')\n",
        "\n",
        "# Function to preprocess a single comment\n",
        "def preprocess_comment(comment):\n",
        "    # Lowercasing\n",
        "    comment = comment.lower()\n",
        "\n",
        "    # Remove URLs\n",
        "    comment = re.sub(r'http\\S+', '', comment)\n",
        "\n",
        "    # Remove special characters and non-alphanumeric characters\n",
        "    comment = re.sub(r'[^a-zA-Z\\s]', '', comment)\n",
        "\n",
        "    # Tokenization\n",
        "    tokens = word_tokenize(comment)\n",
        "\n",
        "    # Removing punctuation\n",
        "    tokens = [token for token in tokens if token not in string.punctuation]\n",
        "\n",
        "    # Removing stopwords\n",
        "    stop_words = set(stopwords.words('english'))\n",
        "    tokens = [token for token in tokens if token not in stop_words]\n",
        "\n",
        "    # Porter Stemmer\n",
        "    stemmer = SnowballStemmer(\"english\")\n",
        "    tokens = [stemmer.stem(token) for token in tokens]\n",
        "\n",
        "    # Joining tokens\n",
        "    preprocessed_comment = ' '.join(tokens)\n",
        "\n",
        "    return preprocessed_comment\n",
        "\n",
        "# Apply preprocessing to all comments in the DataFrame\n",
        "undersampled_df['Preprocessed_Comment'] = undersampled_df['comment'].apply(preprocess_comment)\n",
        "undersampled_df.drop('comment',axis=1,inplace = True) # dropping comment as we have the preprocessed comments in a new column\n",
        "undersampled_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 493
        },
        "id": "3ympB3lWAHCH",
        "outputId": "24d897ed-ea4a-4928-ec1d-759e36616045"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
            "[nltk_data]   Unzipping tokenizers/punkt.zip.\n",
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Unzipping corpora/stopwords.zip.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       upvotes  sentiment                               Preprocessed_Comment\n",
              "0            1         -1                                    theyr fat heavi\n",
              "1            1         -1  price high specif energi batteri went viabl fa...\n",
              "2            1          0                           tesla insur state ny one\n",
              "3            1          0                                              delet\n",
              "4           14         -1  tesla su investig fals rang claim systemat lie...\n",
              "...        ...        ...                                                ...\n",
              "25234        1         -1  recent got button well abstract ocean sinc shi...\n",
              "25235        1          1  note subscrib get lifetim option get app featu...\n",
              "25236        5          1  data store privat icloudalmost app function ru...\n",
              "25237        0          0                            um navig way supercharg\n",
              "25238        1         -1                                  mention k kia bad\n",
              "\n",
              "[25239 rows x 3 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-74bb7c97-e453-4c51-a841-0942f1dcd79d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>upvotes</th>\n",
              "      <th>sentiment</th>\n",
              "      <th>Preprocessed_Comment</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>theyr fat heavi</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>price high specif energi batteri went viabl fa...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>tesla insur state ny one</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>delet</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>14</td>\n",
              "      <td>-1</td>\n",
              "      <td>tesla su investig fals rang claim systemat lie...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25234</th>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>recent got button well abstract ocean sinc shi...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25235</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>note subscrib get lifetim option get app featu...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25236</th>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>data store privat icloudalmost app function ru...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25237</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>um navig way supercharg</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25238</th>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>mention k kia bad</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>25239 rows × 3 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-74bb7c97-e453-4c51-a841-0942f1dcd79d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-74bb7c97-e453-4c51-a841-0942f1dcd79d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-74bb7c97-e453-4c51-a841-0942f1dcd79d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b2ed389f-40ca-4e84-9a0c-cb0a17d8575a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b2ed389f-40ca-4e84-9a0c-cb0a17d8575a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b2ed389f-40ca-4e84-9a0c-cb0a17d8575a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_42cd915c-e186-49f8-8a2e-50d0f76e5329\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('undersampled_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_42cd915c-e186-49f8-8a2e-50d0f76e5329 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('undersampled_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "undersampled_df",
              "summary": "{\n  \"name\": \"undersampled_df\",\n  \"rows\": 25239,\n  \"fields\": [\n    {\n      \"column\": \"upvotes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17,\n        \"min\": -43,\n        \"max\": 1218,\n        \"num_unique_values\": 141,\n        \"samples\": [\n          29,\n          260,\n          15\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sentiment\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": -1,\n        \"max\": 1,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          -1,\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Preprocessed_Comment\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2185,\n        \"samples\": [\n          \"stat price tesla hyundai compareablelucid much\",\n          \"tessi\",\n          \"none thought stop updat softwar vertic monitor car\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# preprocessing is done so niow moving to feature engineering\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.metrics import accuracy_score, classification_report, precision_score, recall_score, f1_score\n",
        "\n",
        "# Load the preprocessed data\n",
        "\n",
        "X = undersampled_df['Preprocessed_Comment']\n",
        "y = undersampled_df['sentiment']\n",
        "\n",
        "# Split the data into training and testing sets (80% train, 20% test)\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.50, random_state=42)\n",
        "\n",
        "# Initialize the TF-IDF vectorizer\n",
        "tfidf_vectorizer = TfidfVectorizer(max_features=5000)  # You can adjust max_features as needed\n",
        "\n",
        "# Fit and transform the training data\n",
        "X_train_tfidf = tfidf_vectorizer.fit_transform(X_train)\n",
        "\n",
        "# Transform the testing data\n",
        "X_test_tfidf = tfidf_vectorizer.transform(X_test)\n",
        "\n",
        "# Print the shape of the TF-IDF transformed data\n",
        "print(\"Shape of X_train_tfidf:\", X_train_tfidf.shape)\n",
        "print(\"Shape of X_test_tfidf:\", X_test_tfidf.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kkTcDGLmEm0u",
        "outputId": "eedb717b-a463-4dbe-e4f6-040e52d64292"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Shape of X_train_tfidf: (12619, 3865)\n",
            "Shape of X_test_tfidf: (12620, 3865)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.tree import DecisionTreeClassifier\n",
        "\n",
        "# Initialize Decision Tree Classifier\n",
        "clf = DecisionTreeClassifier(random_state=42)\n",
        "\n",
        "# Train the Model\n",
        "clf.fit(X_train_tfidf, y_train)\n",
        "\n",
        "# Evaluate the Model\n",
        "y_pred = clf.predict(X_test_tfidf)\n",
        "# Calculate precision\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "\n",
        "# Calculate precision\n",
        "precision = precision_score(y_test, y_pred, average='weighted')\n",
        "\n",
        "# Calculate recall\n",
        "recall = recall_score(y_test, y_pred, average='weighted')\n",
        "\n",
        "# Calculate F1-score\n",
        "f1 = f1_score(y_test, y_pred, average='weighted')\n",
        "\n",
        "print(f\"Accuracy: {accuracy}\")\n",
        "print(f\"Precision: {precision}\")\n",
        "print(f\"Recall: {recall}\")\n",
        "print(f\"F1-score: {f1}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rtOCcuBRFajz",
        "outputId": "ff138623-32a6-4ada-bf2d-9d4f7972871e"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.9835182250396196\n",
            "Precision: 0.9835167364507152\n",
            "Recall: 0.9835182250396196\n",
            "F1-score: 0.98351614099096\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "ixZWxr3Pszd6",
        "outputId": "f8ed2f8a-4983-42dd-a265-6dfa00f24609"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# From the above output we can find the main keywords from the comments"
      ],
      "metadata": {
        "id": "V0WqEf7EuXP6"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}